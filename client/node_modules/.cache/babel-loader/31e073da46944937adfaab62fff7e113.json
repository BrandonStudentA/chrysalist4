{"ast":null,"code":"import axios from 'axios';\nconst baseUrl = 'https://ancient-scrubland-63876.herokuapp.com/';\nconst api = axios.create({\n  baseURL: baseUrl\n});\nexport const loginUser = async loginData => {\n  const resp = await api.post('/auth/login', {\n    auth: loginData\n  });\n  localStorage.setItem('authToken', resp.data.token);\n  api.defaults.headers.common.authorization = `Bearer ${resp.data.token}`;\n  return resp.data.user;\n};\nexport const registerUser = async registerData => {\n  const resp = await api.post('/users/', {\n    user: registerData\n  });\n  localStorage.setItem('authToken', resp.data.token);\n  api.defaults.headers.common.authorization = `Bearer ${resp.data.token}`;\n  return resp.data.user;\n};\nexport const verifyUser = async () => {\n  const token = localStorage.getItem('authToken');\n\n  if (token) {\n    api.defaults.headers.common.authorization = `Bearer ${token}`;\n    const resp = await api.get('/auth/verify');\n    return resp.data;\n  }\n\n  return false;\n};\nexport const removeToken = () => {\n  api.defaults.headers.common.authorization = null;\n};\nexport const readAllUsers = async () => {\n  const resp = await api.get('/users');\n  return resp.data;\n};\nexport const updateUser = async (id, data) => {\n  const resp = await api.put(`/users/${id}`, {\n    user: data\n  });\n  return resp.data;\n};\nexport const destroyUser = async id => {\n  const resp = await api.delete(`/users/${id}`);\n  return resp.data;\n}; // ---------------------remedies----------------------\n\nexport const createRemedy = async data => {\n  const resp = await api.post('new/remedies', {\n    remedy: data\n  });\n  return resp.data;\n};\nexport const readAllRemedies = async (id, mood_id) => {\n  const resp = await api.get(`/remedies/${id}/${mood_id}`);\n  return resp.data;\n};\nexport const viewAllMoods = async () => {\n  const resp = await api.get('/moods');\n  return resp.data;\n};","map":{"version":3,"sources":["/Users/fuentes/newB/chrysalist4/client/src/services/api-helper.js"],"names":["axios","baseUrl","api","create","baseURL","loginUser","loginData","resp","post","auth","localStorage","setItem","data","token","defaults","headers","common","authorization","user","registerUser","registerData","verifyUser","getItem","get","removeToken","readAllUsers","updateUser","id","put","destroyUser","delete","createRemedy","remedy","readAllRemedies","mood_id","viewAllMoods"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAG,gDAAhB;AAEA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAN,CAAa;AACvBC,EAAAA,OAAO,EAAEH;AADc,CAAb,CAAZ;AAMA,OAAO,MAAMI,SAAS,GAAG,MAAOC,SAAP,IAAqB;AAC5C,QAAMC,IAAI,GAAG,MAAML,GAAG,CAACM,IAAJ,CAAS,aAAT,EAAwB;AAAEC,IAAAA,IAAI,EAAEH;AAAR,GAAxB,CAAnB;AACAI,EAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCJ,IAAI,CAACK,IAAL,CAAUC,KAA5C;AACAX,EAAAA,GAAG,CAACY,QAAJ,CAAaC,OAAb,CAAqBC,MAArB,CAA4BC,aAA5B,GAA6C,UAASV,IAAI,CAACK,IAAL,CAAUC,KAAM,EAAtE;AACA,SAAON,IAAI,CAACK,IAAL,CAAUM,IAAjB;AACD,CALM;AAOP,OAAO,MAAMC,YAAY,GAAG,MAAOC,YAAP,IAAwB;AAClD,QAAMb,IAAI,GAAG,MAAML,GAAG,CAACM,IAAJ,CAAS,SAAT,EAAoB;AAAEU,IAAAA,IAAI,EAAEE;AAAR,GAApB,CAAnB;AACAV,EAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCJ,IAAI,CAACK,IAAL,CAAUC,KAA5C;AACAX,EAAAA,GAAG,CAACY,QAAJ,CAAaC,OAAb,CAAqBC,MAArB,CAA4BC,aAA5B,GAA6C,UAASV,IAAI,CAACK,IAAL,CAAUC,KAAM,EAAtE;AACA,SAAON,IAAI,CAACK,IAAL,CAAUM,IAAjB;AACD,CALM;AAOP,OAAO,MAAMG,UAAU,GAAG,YAAY;AACpC,QAAMR,KAAK,GAAGH,YAAY,CAACY,OAAb,CAAqB,WAArB,CAAd;;AACA,MAAIT,KAAJ,EAAW;AACTX,IAAAA,GAAG,CAACY,QAAJ,CAAaC,OAAb,CAAqBC,MAArB,CAA4BC,aAA5B,GAA6C,UAASJ,KAAM,EAA5D;AACA,UAAMN,IAAI,GAAG,MAAML,GAAG,CAACqB,GAAJ,CAAQ,cAAR,CAAnB;AACA,WAAOhB,IAAI,CAACK,IAAZ;AACD;;AACD,SAAO,KAAP;AACD,CARM;AAYP,OAAO,MAAMY,WAAW,GAAG,MAAM;AAC/BtB,EAAAA,GAAG,CAACY,QAAJ,CAAaC,OAAb,CAAqBC,MAArB,CAA4BC,aAA5B,GAA4C,IAA5C;AACD,CAFM;AAIP,OAAO,MAAMQ,YAAY,GAAG,YAAY;AACtC,QAAMlB,IAAI,GAAG,MAAML,GAAG,CAACqB,GAAJ,CAAQ,QAAR,CAAnB;AACA,SAAOhB,IAAI,CAACK,IAAZ;AACD,CAHM;AAKP,OAAO,MAAMc,UAAU,GAAG,OAAOC,EAAP,EAAWf,IAAX,KAAoB;AAC5C,QAAML,IAAI,GAAG,MAAML,GAAG,CAAC0B,GAAJ,CAAS,UAASD,EAAG,EAArB,EAAwB;AAAET,IAAAA,IAAI,EAAEN;AAAR,GAAxB,CAAnB;AACA,SAAOL,IAAI,CAACK,IAAZ;AACD,CAHM;AAKP,OAAO,MAAMiB,WAAW,GAAG,MAAOF,EAAP,IAAc;AACvC,QAAMpB,IAAI,GAAG,MAAML,GAAG,CAAC4B,MAAJ,CAAY,UAASH,EAAG,EAAxB,CAAnB;AACA,SAAOpB,IAAI,CAACK,IAAZ;AACD,CAHM,C,CAIP;;AAEA,OAAO,MAAMmB,YAAY,GAAG,MAAOnB,IAAP,IAAiB;AACzC,QAAML,IAAI,GAAG,MAAML,GAAG,CAACM,IAAJ,CAAS,cAAT,EAAyB;AAACwB,IAAAA,MAAM,EAACpB;AAAR,GAAzB,CAAnB;AACA,SAAOL,IAAI,CAACK,IAAZ;AACH,CAHM;AAIP,OAAO,MAAMqB,eAAe,GAAG,OAAON,EAAP,EAAWO,OAAX,KAAuB;AACpD,QAAM3B,IAAI,GAAG,MAAML,GAAG,CAACqB,GAAJ,CAAS,aAAYI,EAAG,IAAGO,OAAQ,EAAnC,CAAnB;AACA,SAAO3B,IAAI,CAACK,IAAZ;AACD,CAHM;AAIP,OAAO,MAAMuB,YAAY,GAAG,YAAY;AACtC,QAAM5B,IAAI,GAAG,MAAML,GAAG,CAACqB,GAAJ,CAAQ,QAAR,CAAnB;AACA,SAAOhB,IAAI,CAACK,IAAZ;AACD,CAHM","sourcesContent":["import axios from 'axios';\n\nconst baseUrl = 'https://ancient-scrubland-63876.herokuapp.com/'\n\nconst api = axios.create({\n  baseURL: baseUrl\n})\n\n\n\nexport const loginUser = async (loginData) => {\n  const resp = await api.post('/auth/login', { auth: loginData })\n  localStorage.setItem('authToken', resp.data.token);\n  api.defaults.headers.common.authorization = `Bearer ${resp.data.token}`\n  return resp.data.user\n}\n\nexport const registerUser = async (registerData) => {\n  const resp = await api.post('/users/', { user: registerData })\n  localStorage.setItem('authToken', resp.data.token);\n  api.defaults.headers.common.authorization = `Bearer ${resp.data.token}`\n  return resp.data.user\n}\n\nexport const verifyUser = async () => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    api.defaults.headers.common.authorization = `Bearer ${token}`\n    const resp = await api.get('/auth/verify');\n    return resp.data\n  }\n  return false\n}\n\n\n\nexport const removeToken = () => {\n  api.defaults.headers.common.authorization = null;\n}\n\nexport const readAllUsers = async () => {\n  const resp = await api.get('/users')\n  return resp.data\n}\n\nexport const updateUser = async (id, data) => {\n  const resp = await api.put(`/users/${id}`, { user: data })\n  return resp.data\n}\n\nexport const destroyUser = async (id) => {\n  const resp = await api.delete(`/users/${id}`)\n  return resp.data\n}\n// ---------------------remedies----------------------\n\nexport const createRemedy = async (data ) => {\n    const resp = await api.post('new/remedies', {remedy:data})\n    return resp.data\n}\nexport const readAllRemedies = async (id, mood_id) => {\n  const resp = await api.get(`/remedies/${id}/${mood_id}`)\n  return resp.data\n}\nexport const viewAllMoods = async () => {\n  const resp = await api.get('/moods')\n  return resp.data\n}"]},"metadata":{},"sourceType":"module"}